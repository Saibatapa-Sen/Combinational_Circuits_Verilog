`timescale 1ns / 1ps
 
module Priority_Encoder(
input [3:0]I,
output reg [1:0]Y);
always @ (I)
begin
casex (I)
4'b1XXX:Y=2'b11;
4'b01XX:Y=2'b10;
4'b001X:Y=2'b01;
4'b0001:Y=2'b00;
default:Y=2'b00;
endcase
end
endmodule
//if (I[3]==1)
//assign Y=2'b11;
//else if (I[2]==1)
//assign Y=2'b10;
//else if (I[1]==1)
//assign Y=2'b01;
//else
//assign Y=2'b00;

module Priority_Encoder_8x3(
input [7:0]I,
output reg [2:0]Y
);
always @ (I)
begin
if (I[7]==1) 
assign Y=3'b111;
else if (I[6]==1) 
assign Y=3'b110;
else if (I[5]==1) 
assign Y=3'b101;
else if (I[4]==1) 
assign Y=3'b100;
else if (I[3]==1) 
assign Y=3'b011;
else if (I[2]==1) 
assign Y=3'b010;
else if (I[1]==1) 
assign Y=3'b001;
else
assign Y=3'b000;
end
endmodule

`timescale 1ns / 1ps
 
module Priority_Encoder(
input [3:0]I,
output reg [1:0]Y);
always @ (I)
begin
casex (I)
4'b1XXX:Y=2'b11;
4'b01XX:Y=2'b10;
4'b001X:Y=2'b01;
4'b0001:Y=2'b00;
default:Y=2'b00;
endcase
end
endmodule
//if (I[3]==1)
//assign Y=2'b11;
//else if (I[2]==1)
//assign Y=2'b10;
//else if (I[1]==1)
//assign Y=2'b01;
//else
//assign Y=2'b00;

module Priority_Encoder_8x3(
input [7:0]I,
output reg [2:0]Y
);
always @ (I)
begin
if (I[7]==1) 
assign Y=3'b111;
else if (I[6]==1) 
assign Y=3'b110;
else if (I[5]==1) 
assign Y=3'b101;
else if (I[4]==1) 
assign Y=3'b100;
else if (I[3]==1) 
assign Y=3'b011;
else if (I[2]==1) 
assign Y=3'b010;
else if (I[1]==1) 
assign Y=3'b001;
else
assign Y=3'b000;
end
endmodule
