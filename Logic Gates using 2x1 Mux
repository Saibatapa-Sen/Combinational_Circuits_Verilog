`timescale 1ns / 1ps

module Mux2X1(
input I0,I1,S,
output O
    );
assign O=(~S&I0)|(S&I1);    
endmodule

module NOT_gate(
input x,
output f
    );
Mux2X1 DUT (1'b1,1'b0,x,f);  
endmodule

module AND_gate(
input x,y,
output f
    );
Mux2X1 DUT(1'b0,y,x,f);
endmodule

module OR_gate(
input x,y,
output f
    );
Mux2X1 DUT(y,1'b1,x,f);
endmodule

module NAND_gate(
input x,y,
output f
    );
    wire f1;
Mux2X1 DUT1(1'b1,1'b0,y,f1); //~y
Mux2X1 DUT2(1,f1,x,f);
endmodule

module NOR_gate(
input x,y,
output f
    );
    wire f1;
Mux2X1 DUT1(1'b1,1'b0,y,f1); //~y
Mux2X1 DUT2(f1,1'b0,x,f);
endmodule

module XOR_gate(
input x,y,
output f
    );
    wire f1;
Mux2X1 DUT1(1'b1,1'b0,y,f1); //~y
Mux2X1 DUT2(y,f1,x,f);
endmodule

module XNOR_gate(
input x,y,
output f
    );
    wire f1;
Mux2X1 DUT1(1'b1,1'b0,y,f1); //~y
Mux2X1 DUT2(f1,y,x,f);
endmodule

`timescale 1ns / 1ps

module LogicGate_tb(
    );
    reg x;
    reg y;
    wire f;
    
    NAND_gate DUT(x,y,f);
    initial begin
    x=1'b0; y=1'b0; #30;
    x=1'b0; y=1'b1; #30;
    x=1'b1; y=1'b0; #30;
    x=1'b1; y=1'b1; #30;
     $stop;
    end
endmodule
    //NOT_gate DUT(x,f);
    //initial begin
    //x=1'b0; #30;
    //x=1'b1; #30;
