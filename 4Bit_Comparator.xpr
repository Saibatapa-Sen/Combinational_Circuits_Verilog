`timescale 1ns / 1ps

module Bit_4(
  input [3:0] A, B,
  output reg E, G, L
);

  always @ (A,B) 
  begin
  if (A[3:0]==B[3:0]) 
  begin
  E=1'b1; G=1'b0; L=1'b0;
  end
  else if (A[3]>B[3]||(A[3]==B[3]&&A[2]> B[2])||(A[3:2]==B[3:2]&&A[1]>B[1])||(A[3:1]==B[3:1]&&A[0]> B[0]))
  begin
  E=1'b0; G=1'b1; L=1'b0;
  end
  else 
  begin
  E=1'b0; G=1'b0; L=1'b1;
  end
  end
endmodule


`timescale 1ns / 1ps

module Bit4_tb();
reg [3:0]A;
reg [3:0]B;
wire E;
wire G;
wire L;

Bit_4 DUT(A,B,E,G,L);
initial begin
A=4'b0000; B=4'b0000; #30; //E
A=4'b1000; B=4'b1000; #30; //E
A=4'b1000; B=4'b0111; #30; //G
A=4'b1100; B=4'b1011; #30; //G
A=4'b1110; B=4'b1101; #30; //G
A=4'b1101; B=4'b1100; #30; //G
A=4'b0111; B=4'b1000; #30; //L
A=4'b1011; B=4'b1100; #30; //L
A=4'b1101; B=4'b1111; #30; //L
A=4'b1100; B=4'b1101; #30; //L
$stop;
end
endmodule
